<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[图片异步加载之AFNetwork（一）]]></title>
      <url>http://lionwy.github.io/%E5%9B%BE%E7%89%87%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E4%B9%8BAFNetwork%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="UIImageView-AFNetworking"><a href="#UIImageView-AFNetworking" class="headerlink" title="UIImageView+AFNetworking"></a>UIImageView+AFNetworking</h2><blockquote>
<p>This category adds methods to the UIKit framework’s UIImageView class. The methods in this category provide support for loading remote images asynchronously from a URL.</p>
</blockquote>
<p>给UIImageView添加分类方法，通过一个URL异步加载远程图片</p>
<p><img src="http://oeb4c30x3.bkt.clouddn.com/research.jpg" alt="research.jpg"></p>
<ol>
<li><p>核心方法就是下面很简单的方法：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setImageWithURL:<span class="params">(NSURL *)</span>url;</div></pre></td></tr></table></figure>
</li>
<li><p>内部实现，创建图片请求，并在请求头添加参数,后续的所有操作都是跟request有关</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">setImageWithURL:</span>(NSURL *)url</div><div class="line"><span class="symbol">       placeholderImage:</span>(UIImage *)placeholderImage</div><div class="line">&#123;</div><div class="line">	    NSMutableURLRequest *request = [NSMutableURLRequest <span class="string">requestWithURL:</span>url];</div><div class="line">	    [request <span class="string">addValue:</span>@<span class="string">"image/*"</span> <span class="string">forHTTPHeaderField:</span>@<span class="string">"Accept"</span>];</div><div class="line">	</div><div class="line">	    [self <span class="string">setImageWithURLRequest:</span>request <span class="string">placeholderImage:</span>placeholderImage <span class="string">success:</span>nil <span class="string">failure:</span>nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上面两个方法最终调用的都是下面的方法，下面就针对最核心的方法，一步步分析它的具体实现</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setImageWithURLRequest:(<span class="built_in">NSURLRequest</span> *)urlRequest</div><div class="line">              placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholderImage</div><div class="line">                       success:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> *request, <span class="built_in">NSHTTPURLResponse</span> * _Nullable response, <span class="built_in">UIImage</span> *image))success</div><div class="line">                       failure:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> *request, <span class="built_in">NSHTTPURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> *error))failure;</div></pre></td></tr></table></figure>
</li>
<li><p>在任何请求发生之前，都要进行URLRequest的判断。如果URL为空，就取消图片下载任务，并直接设置占位图</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([urlRequest URL] == <span class="literal">nil</span>) &#123;</div><div class="line">    </div><div class="line">    <span class="regexp">//</span> 对于当前的这个任务，取消所有正在执行的图片下载操作，并把下载回执置空</div><div class="line">    [<span class="keyword">self</span> cancelImageDownloadTask];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.image = placeholderImage;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上面方法里面涉及到两个类<code>AFImageDownloadReceipt</code> <code>AFImageDownloader</code></p>
<ul>
<li><p>首先需要明白一个规则：图片下载任务的取消不是由任务自己取消，而是通过“下载回执”取消</p>
</li>
<li><p>AFImageDownloader：用来处理图片下载的类，所有下载任务都由它处理</p>
</li>
<li><p>AFImageDownloadReceipt：“下载回执”，跟AFImageDownloader一一对应，主要是用来取消AFImageDownloader正在运行的任务，只有两个属性：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSessionDataTask</span> *task;<span class="comment">// 下载任务，即AFImageDownloader执行的任务</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSUUID</span> *receiptID;<span class="comment">//任务的唯一标识，用来区分两个任务是否相同</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>根据<code>URLRequest</code>来判断两次请求是否同一个，即，阻止同一张图片进行多次相同的请求，优化请求。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> <span class="symbol">isActiveTaskURLEqualToURLRequest:</span>urlRequest])&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>AFImageRequestCache</code>协议，是用来添加、删除、访问图片。这里把下载器存储图片的对象赋值给一个支持该协议的对象，用来获取缓存图片</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id &lt;AFImageRequestCache&gt; imageCache = downloader.imageCache<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过URLrequest在缓存中查找图片，如果能找到，就返回缓存图片，操作结束。缓存见<a href="https://lionwy.github.io/%E5%9B%BE%E7%89%87%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E4%B9%8BAFNetwork%EF%BC%88%E4%B8%80%EF%BC%89/#AFAutoPurgingImageCache">这里</a></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *cachedImage = [imageCache imageforRequest:urlRequest withAdditionalIdentifier:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (cachedImage) &#123;</div><div class="line">        <span class="comment">// 如果需要返回结果，就进行回调，在回调block中进行手动设置imageView.image</span></div><div class="line">        <span class="keyword">if</span> (success) &#123;</div><div class="line">            success(urlRequest, <span class="literal">nil</span>, cachedImage);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.image = cachedImage;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 操作已经完成，把下载回执置空，</span></div><div class="line">        [<span class="keyword">self</span> clearActiveDownloadInformation];</div><div class="line">     </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果有占位图，就先设置占位图。<code>NSUUID</code>是用来创建唯一标识的，每次调用<code>UUID</code>返回结果都不一样，对应于下载回执的任务标识<code>receiptID</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (placeholderImage) &#123;</div><div class="line">  		<span class="keyword">self</span>.image = placeholderImage;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 弱引用，防止保留环</span></div><div class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>)weakSelf = <span class="keyword">self</span>;</div><div class="line"><span class="built_in">NSUUID</span> *downloadID = [<span class="built_in">NSUUID</span> UUID];</div></pre></td></tr></table></figure>
</li>
<li><p>根据<code>URLrequest</code>和<code>receiptID</code>进行图片下载，返回的是对应下载操作的回执<code>AFImageDownloadReceipt</code>，具体实现下一篇马上呈现</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> AFImageDownloadReceipt *)downloadImageForURLRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">                                                 withReceiptID:(<span class="built_in">NSUUID</span> *)receiptID</div><div class="line">                                                        success:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> *request, <span class="built_in">NSHTTPURLResponse</span>  * _Nullable response, <span class="built_in">UIImage</span> *responseObject))success</div><div class="line">                                                        failure:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> *request, <span class="built_in">NSHTTPURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> *error))failure;</div></pre></td></tr></table></figure>
</li>
<li><p>获取图片成功的情况下：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 首先在<span class="keyword">block中，强引用下，避免在运行过程中，self被自动释放</span></div><div class="line">   __strong __typeof(weakSelf)<span class="keyword">strongSelf </span>= weakSelf<span class="comment">;</span></div><div class="line">   // 根据任务标识判断，避免返回结果对应的请求不是之前的那个请求</div><div class="line">   <span class="meta">if</span> ([<span class="keyword">strongSelf.af_activeImageDownloadReceipt.receiptID </span>isEqual:downloadID]) &#123;</div><div class="line">   	   // 如果有成功块，就返回成功块，并在<span class="keyword">block中手动设置图片</span></div><div class="line">       <span class="meta">if</span> (success) &#123;</div><div class="line">           success(request, response, responseObject)<span class="comment">;</span></div><div class="line">       &#125; <span class="meta">else</span> <span class="meta">if</span>(responseObject) &#123;</div><div class="line">           <span class="keyword">strongSelf.image </span>= responseObject<span class="comment">;</span></div><div class="line">       &#125;</div><div class="line">       // 操作完成，下载回执置空</div><div class="line">       [<span class="keyword">strongSelf </span>clearActiveDownloadInformation]<span class="comment">;</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>失败情况下，返回错误信息，并清空下载信息</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__strong __typeof(weakSelf)strongSelf = weakSelf;</div><div class="line"><span class="keyword">if</span> ([strongSelf.af_activeImageDownloadReceipt.receiptID isEqual:downloadID]) &#123;</div><div class="line">   <span class="keyword">if</span> (failure) &#123;</div><div class="line">       failure(<span class="built_in">request</span>, <span class="built_in">response</span>, <span class="keyword">error</span>);</div><div class="line">   &#125;</div><div class="line">   [strongSelf clearActiveDownloadInformation];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>把返回的下载回执，赋值给图片对应的下载回执，对应最开始的第6点，也就是说，当一张图片正在进行下载操作，如果再进行一次相同的请求，那么第二次请求直接返回，继续执行第一次的请求，直到请求结束，然后赋值。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.af_activeImageDownloadReceipt = receipt<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="AFAutoPurgingImageCache"><a href="#AFAutoPurgingImageCache" class="headerlink" title="AFAutoPurgingImageCache"></a>AFAutoPurgingImageCache</h2><blockquote>
<p>The AutoPurgingImageCache in an in-memory image cache used to store images up to a given memory capacity. When the memory capacity is reached, the image cache is sorted by last access date, then the oldest image is continuously purged until the preferred memory usage after purge is met. Each time an image is accessed through the cache, the internal access date of the image is updated.</p>
</blockquote>
<p>这个类是用来在内存中进行图片缓存操作的，并且会根据图片使用时间排序，当内存快满的时候，先释放最久未使用的图片，然后再清除优先使用内存里面的图片。每次使用图片后，图片使用时间都会更新。<br>这个类遵循<code>AFImageRequestCache</code>协议，因此可以使用协议方法</p>
<ol>
<li><p>内存分类：默认内存100M，优先使用内存60M。并且使用<code>cachedImages</code>来存储所有的图片对象。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UInt64</span> memoryCapacity;<span class="comment">//总内存</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UInt64</span> preferredMemoryUsageAfterPurge;<span class="comment">//优先使用内存</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">UInt64</span> memoryUsage;<span class="comment">//内存已使用容量</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> &lt;<span class="built_in">NSString</span>* , AFCachedImage*&gt; *cachedImages;<span class="comment">//可变字典来存储图片对象</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UInt64</span> currentMemoryUsage;<span class="comment">//当前内存使用情况，跟memoryUsage一样的</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">dispatch_queue_t</span> synchronizationQueue;<span class="comment">//同步线程</span></div></pre></td></tr></table></figure>
</li>
<li><p>这里涉及到一个类<code>AFCachedImage</code>，用来存储图片以及图片信息的类</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *image;<span class="comment">//图片</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *identifier;<span class="comment">//图片标识</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UInt64</span> totalBytes;<span class="comment">//图片大小</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *lastAccessDate;<span class="comment">//最新使用日期</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">UInt64</span> currentMemoryUsage;<span class="comment">//当前内存已使用容量</span></div></pre></td></tr></table></figure>
</li>
<li><p>这里有个方法可以学习下，如何计算图片所占内存</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据屏幕进行等比例的缩减/扩大图片size</span></div><div class="line">CGSize imageSize = CGSizeMake(<span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span> * <span class="built_in">image</span>.<span class="built_in">scale</span>, <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span> * <span class="built_in">image</span>.<span class="built_in">scale</span>);</div><div class="line">CGFloat bytesPerPixel = <span class="number">4.0</span>;</div><div class="line">CGFloat bytesPerSize = imageSize.<span class="built_in">width</span> * imageSize.<span class="built_in">height</span>;</div><div class="line">self.totalBytes = (UInt64)bytesPerPixel * (UInt64)bytesPerSize;</div></pre></td></tr></table></figure>
</li>
<li><p>回到上面那个协议方法，返回一个对应于<code>request</code>和<code>identifier</code>的图片</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageforRequest:(<span class="built_in">NSURLRequest</span> *)request withAdditionalIdentifier:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)identifier;</div></pre></td></tr></table></figure>
</li>
<li><p>图片的Identifier，直接拼接url和additionalIdentifier</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)imageCacheKeyFromURLRequest:(<span class="built_in">NSURLRequest</span> *)request withAdditionalIdentifier:(<span class="built_in">NSString</span> *)additionalIdentifier &#123;</div><div class="line">	    <span class="built_in">NSString</span> *key = request.URL.absoluteString;</div><div class="line">	    <span class="keyword">if</span> (additionalIdentifier != <span class="literal">nil</span>)</div><div class="line">	    &#123;</div><div class="line">	        key = [key stringByAppendingString:additionalIdentifier];</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> key;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>根据图片的Identifier，在可变字典中获取需要的图片，并更新使用时间。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageWithIdentifier:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">	    __block <span class="built_in">UIImage</span> *image = <span class="literal">nil</span>;</div><div class="line">	    <span class="comment">// 同步操作，获取缓存图片</span></div><div class="line">	    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.synchronizationQueue, ^&#123;</div><div class="line">	        <span class="comment">// 用来存储图片信息的类</span></div><div class="line">	        AFCachedImage *cachedImage = <span class="keyword">self</span>.cachedImages[identifier];</div><div class="line">	        image = [cachedImage accessImage];</div><div class="line">	    &#125;);</div><div class="line">	    </div><div class="line">	    <span class="keyword">return</span> image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>内存中添加图片，使用栅栏保证线程安全，栅栏即，把之前所有的事情处理完毕之后，再进行栅栏中的处理，栅栏处理完成之后，再进行后续的处理。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dispatch_barrier_async(<span class="keyword">self</span>.synchronizationQueue, ^&#123;</div><div class="line">    <span class="comment">// 根据图片和标识，生成图片信息类</span></div><div class="line">    AFCachedImage *cacheImage = [[AFCachedImage alloc] initWithImage:image identifier:identifier];</div><div class="line">    <span class="comment">// 根据标识查找是否已经存在对应的图片</span></div><div class="line">    AFCachedImage *previousCachedImage = <span class="keyword">self</span>.cachedImages[identifier];</div><div class="line">    <span class="comment">// 如果已经存在，先减少图片所占内存</span></div><div class="line">    <span class="keyword">if</span> (previousCachedImage != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.currentMemoryUsage -= previousCachedImage.totalBytes;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 再更新图片，和内存使用情况</span></div><div class="line">    <span class="keyword">self</span>.cachedImages[identifier] = cacheImage;</div><div class="line">    <span class="keyword">self</span>.currentMemoryUsage += cacheImage.totalBytes;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>如果内存满了：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">dispatch_barrier_async(<span class="keyword">self</span>.synchronizationQueue, ^&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.currentMemoryUsage &gt; <span class="keyword">self</span>.memoryCapacity) &#123;</div><div class="line">        <span class="comment">// 1. 需要清除的缓存大小</span></div><div class="line">        <span class="built_in">UInt64</span> bytesToPurge = <span class="keyword">self</span>.currentMemoryUsage - <span class="keyword">self</span>.preferredMemoryUsageAfterPurge;</div><div class="line">        </div><div class="line">        <span class="comment">// 2. 先把可变字典里面所有的图片信息类放入数组，然后根据最新使用时间进行排序 </span></div><div class="line">        <span class="built_in">NSMutableArray</span> &lt;AFCachedImage*&gt; *sortedImages = [<span class="built_in">NSMutableArray</span> arrayWithArray:<span class="keyword">self</span>.cachedImages.allValues];</div><div class="line">        <span class="built_in">NSSortDescriptor</span> *sortDescriptor = [[<span class="built_in">NSSortDescriptor</span> alloc] initWithKey:<span class="string">@"lastAccessDate"</span> ascending:<span class="literal">YES</span>];</div><div class="line">        [sortedImages sortUsingDescriptors:@[sortDescriptor]];</div><div class="line"></div><div class="line">        <span class="comment">// 3. 默认已经清除的缓存</span></div><div class="line">        <span class="built_in">UInt64</span> bytesPurged = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 4. 一张张图片进行清除，然后更新已经清除的缓存容量，直到符合要求</span></div><div class="line">        <span class="keyword">for</span> (AFCachedImage *cachedImage <span class="keyword">in</span> sortedImages) &#123;</div><div class="line">            [<span class="keyword">self</span>.cachedImages removeObjectForKey:cachedImage.identifier];</div><div class="line">            bytesPurged += cachedImage.totalBytes;</div><div class="line">            <span class="keyword">if</span> (bytesPurged &gt;= bytesToPurge) &#123;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 5. 更新当前内存已使用容量</span></div><div class="line">        <span class="keyword">self</span>.currentMemoryUsage -= bytesPurged;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong><em>1. AFNetwork中图片的缓存，自定义了一个对象<code>AFAutoPurgingImageCache</code>，在对象中声明了一个可变数组来进行图片的增删改查</em></strong></p>
<p><strong><em>2. AFAutoPurgingImageCache并没有磁盘缓存，也没有本地缓存，程序一旦重启，就需要重新进行缓存的处理</em></strong></p>
<p><strong><em>3. 源码阅读，要找到一个入口，静下心来看</em></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记录Effective Objective-C 2.0 笔记目录]]></title>
      <url>http://lionwy.github.io/%E8%AE%B0%E5%BD%95Effective%20Objective-C%202.0%20%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Effective Objective-C 这本书只要认真看了的都会明白里面的东西有多重要</p>
</blockquote>
<ul>
<li>目前正在看第二遍，顺便写下自己的读书笔记，起个记录和提醒的作用，内容主要是简单总结，很少有例子，如果不清楚的，强烈建议看原书。当然对于电子书爱好者，<a href="https://pan.baidu.com/s/1gePb0Uv" target="_blank" rel="external">这里</a>分享下电子书版本。</li>
</ul>
<p><img src="http://oeb4c30x3.bkt.clouddn.com/download.jpg" alt=""></p>
<h1 id="第一章-熟悉Objective-C"><a href="#第一章-熟悉Objective-C" class="headerlink" title="第一章 熟悉Objective-C"></a>第一章 熟悉Objective-C</h1><blockquote>
<p>OC是在C语言的基础上添加了面向对象特性</p>
</blockquote>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/1.%E4%BA%86%E8%A7%A3Objective-C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%B5%B7%E6%BA%90.md#%E4%BA%86%E8%A7%A3objective-c%E8%AF%AD%E8%A8%80%E7%9A%84%E8%B5%B7%E6%BA%90" target="_blank" rel="external">1、Objective-C的起源、本质</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/2.%E5%9C%A8%E7%B1%BB%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%BD%E9%87%8F%E5%B0%91%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E5%A4%B4%E6%96%87%E4%BB%B6.md#%E5%9C%A8%E7%B1%BB%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%BD%E9%87%8F%E5%B0%91%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E5%A4%B4%E6%96%87%E4%BB%B6" target="_blank" rel="external">2、@class or import</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/3.%E5%A4%9A%E7%94%A8%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95%EF%BC%8C%E5%B0%91%E7%94%A8%E4%B8%8E%E4%B9%8B%E7%AD%89%E4%BB%B7%E7%9A%84%E6%96%B9%E6%B3%95.md#%E5%A4%9A%E7%94%A8%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95%E5%B0%91%E7%94%A8%E4%B8%8E%E4%B9%8B%E7%AD%89%E4%BB%B7%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="external">3、使用<code>@</code>字面量语法</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/4.%E5%A4%9A%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%B8%B8%E9%87%8F%EF%BC%8C%E5%B0%91%E7%94%A8%23define%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4.md#%E5%A4%9A%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E5%B0%91%E7%94%A8define%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4" target="_blank" rel="external">4、如何使用宏define</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/5.%E7%94%A8%E6%9E%9A%E4%B8%BE%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81%E3%80%81%E9%80%89%E9%A1%B9%E3%80%81%E7%8A%B6%E6%80%81%E7%A0%81.md#%E7%94%A8%E6%9E%9A%E4%B8%BE%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81%E9%80%89%E9%A1%B9%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">5、枚举</a></p>
<h1 id="第二章-对象、消息、运行期"><a href="#第二章-对象、消息、运行期" class="headerlink" title="第二章 对象、消息、运行期"></a>第二章 对象、消息、运行期</h1><blockquote>
<ol>
<li>面向对象语言中，对象就是“基本构造单元”（building block），开发者通过对象来存储并传递数据。</li>
<li>对象之间传递数据并执行任务的过程就是“消息传递”（messaging）</li>
<li>运行期环境：就是开发者编写的代码，提供了一些使得对象之间能够传递消息的重要函数了，并且包含创建类实例所用的全部逻辑</li>
</ol>
</blockquote>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/6.%E7%90%86%E8%A7%A3%E2%80%9C%E5%B1%9E%E6%80%A7%E2%80%9D.md#%E7%90%86%E8%A7%A3%E5%B1%9E%E6%80%A7" target="_blank" rel="external">6、copy、strong属性</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/7.%E5%9C%A8%E5%AF%B9%E8%B1%A1%E5%86%85%E9%83%A8%E5%B0%BD%E9%87%8F%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F.md#%E5%9C%A8%E5%AF%B9%E8%B1%A1%E5%86%85%E9%83%A8%E5%B0%BD%E9%87%8F%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F" target="_blank" rel="external">7、<code>.</code>语法</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/8.%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1%E7%AD%89%E5%90%8C%E6%80%A7.md#%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1%E7%AD%89%E5%90%8C%E6%80%A7" target="_blank" rel="external">8、判断对象相等<code>=</code></a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/9.%E4%BB%A5%E7%B1%BB%E7%B0%87%E6%A8%A1%E5%BC%8F%E9%9A%90%E8%97%8F%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82.md#%E4%BB%A5%E7%B1%BB%E7%B0%87%E6%A8%A1%E5%BC%8F%E9%9A%90%E8%97%8F%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82" target="_blank" rel="external">9、类簇和工厂模式</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/10.%E5%9C%A8%E6%97%A2%E6%9C%89%E7%B1%BB%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%94%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE.md#%E5%9C%A8%E6%97%A2%E6%9C%89%E7%B1%BB%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%94%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE" target="_blank" rel="external">10、关联属性</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/11.%E7%90%86%E8%A7%A3objc_msgSend%E7%9A%84%E4%BD%9C%E7%94%A8.md#%E7%90%86%E8%A7%A3objc_msgsend%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="external">11、OC的消息发送</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/12.%E7%90%86%E8%A7%A3%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6.md#%E7%90%86%E8%A7%A3%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91" target="_blank" rel="external">12、消息转发</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/13.%E7%94%A8%E6%96%B9%E6%B3%95%E8%B0%83%E9%85%8D%E6%8A%80%E6%9C%AF%E8%B0%83%E8%AF%95%E9%BB%91%E7%9B%92%E6%96%B9%E6%B3%95.md#%E7%94%A8%E6%96%B9%E6%B3%95%E8%B0%83%E9%85%8D%E6%8A%80%E6%9C%AF%E8%B0%83%E8%AF%95%E9%BB%91%E7%9B%92%E6%96%B9%E6%B3%95" target="_blank" rel="external">13、黑魔法method swizzling</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/14.%E7%90%86%E8%A7%A3%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%A8%E6%84%8F.md#%E7%90%86%E8%A7%A3%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%A8%E6%84%8F" target="_blank" rel="external">14、OC对象</a></p>
<h1 id="第三章-接口与API设计"><a href="#第三章-接口与API设计" class="headerlink" title="第三章 接口与API设计"></a>第三章 接口与API设计</h1><blockquote>
<p>如果要重用代码，就需要在编写接口的时候将其设计成易于复用的形式，包括命名、编码规范等。</p>
</blockquote>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/15.%E7%94%A8%E5%89%8D%E7%BC%80%E9%81%BF%E5%85%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%86%B2%E7%AA%81.md#%E7%94%A8%E5%89%8D%E7%BC%80%E9%81%BF%E5%85%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%86%B2%E7%AA%81" target="_blank" rel="external">15、命名前缀</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/16.%E6%8F%90%E4%BE%9B%E5%85%A8%E8%83%BD%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95.md#%E6%8F%90%E4%BE%9B%E5%85%A8%E8%83%BD%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95" target="_blank" rel="external">16、init</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/17.%E5%AE%9E%E7%8E%B0description%E6%96%B9%E6%B3%95.md#%E5%AE%9E%E7%8E%B0description%E6%96%B9%E6%B3%95" target="_blank" rel="external">17、description</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/18.%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1.md#%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1" target="_blank" rel="external">18、readonly</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/19.%E4%BD%BF%E7%94%A8%E6%B8%85%E6%99%B0%E8%80%8C%E5%8D%8F%E8%B0%83%E7%9A%84%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F.md#%E4%BD%BF%E7%94%A8%E6%B8%85%E6%99%B0%E8%80%8C%E5%8D%8F%E8%B0%83%E7%9A%84%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="external">19、怎么起名字</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/20.%E4%B8%BA%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%E5%90%8D%E5%8A%A0%E5%89%8D%E7%BC%80.md#%E4%B8%BA%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%E5%90%8D%E5%8A%A0%E5%89%8D%E7%BC%80" target="_blank" rel="external">20、私有方法</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/21.%E7%90%86%E8%A7%A3Objective-C%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B.md#%E7%90%86%E8%A7%A3oc%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B" target="_blank" rel="external">21、异常和error</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/22.%E7%90%86%E8%A7%A3NSCoping%E5%8D%8F%E8%AE%AE.md#%E7%90%86%E8%A7%A3nscoping%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">22、copy 是浅拷贝还是很拷贝</a></p>
<h1 id="第四章-协议与分类"><a href="#第四章-协议与分类" class="headerlink" title="第四章 协议与分类"></a>第四章 协议与分类</h1><blockquote>
<p>OC不支持多重继承（继承不同的类），因此我们把某个类应该实现的一系列方法定义在协议里面。<br>OC运行期系统是高度动态的，因此可以利用分类，无需继承子类即可直接为当前类添加方法。</p>
</blockquote>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/23.%E9%80%9A%E8%BF%87%E5%A7%94%E6%89%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E9%97%B4%E9%80%9A%E4%BF%A1.md#%E9%80%9A%E8%BF%87%E5%A7%94%E6%89%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E9%97%B4%E9%80%9A%E4%BF%A1" target="_blank" rel="external">23、协议 delegate</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/24-27%E5%88%86%E7%B1%BB%E7%9A%84%E5%8A%9F%E8%83%BD.md#24-%E5%B0%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%88%86%E6%95%A3%E5%88%B0%E4%BE%BF%E4%BA%8E%E7%AE%A1%E7%90%86%E7%9A%84%E6%95%B0%E4%B8%AA%E5%88%86%E7%B1%BB%E4%B9%8B%E4%B8%AD" target="_blank" rel="external">24-27、用好分类category</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/28.%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E6%8F%90%E4%BE%9B%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1.md#%E9%80%9A%E8%BF%87%E5%8D%8F%E8%AE%AE%E6%8F%90%E4%BE%9B%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1" target="_blank" rel="external">28、<code>id</code>匿名对象</a></p>
<h1 id="第五章-内存管理"><a href="#第五章-内存管理" class="headerlink" title="第五章 内存管理"></a>第五章 内存管理</h1><p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/29%E3%80%8136.%E7%90%86%E8%A7%A3%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0.md#%E7%90%86%E8%A7%A3%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0" target="_blank" rel="external">29、36、向<code>retainCount</code>say NO</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/30.%E4%BB%A5ARC%E7%AE%80%E5%8C%96%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0.md#%E4%BB%A5arc%E7%AE%80%E5%8C%96%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0" target="_blank" rel="external">30、什么是ARC</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/31.%E5%9C%A8dealloc%E4%B8%AD%E5%8F%AA%E9%87%8A%E6%94%BE%E5%BC%95%E7%94%A8%E5%B9%B6%E8%A7%A3%E9%99%A4%E7%9B%91%E5%90%AC.md#%E5%9C%A8dealloc%E4%B8%AD%E5%8F%AA%E9%87%8A%E6%94%BE%E5%BC%95%E7%94%A8%E5%B9%B6%E8%A7%A3%E9%99%A4%E7%9B%91%E5%90%AC" target="_blank" rel="external">31、<code>dealloc</code>里面干什么</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/33.%E4%BB%A5%E5%BC%B1%E5%BC%95%E7%94%A8%E9%81%BF%E5%85%8D%E4%BF%9D%E7%95%99%E7%8E%AF.md#%E4%BB%A5%E5%BC%B1%E5%BC%95%E7%94%A8%E9%81%BF%E5%85%8D%E4%BF%9D%E7%95%99%E7%8E%AF" target="_blank" rel="external">33、循环引用的解决方案</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/34.%E4%BB%A5%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0%E5%9D%97%E9%99%8D%E4%BD%8E%E5%86%85%E5%AD%98%E5%B3%B0%E5%80%BC.md#%E4%BB%A5%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0%E9%99%8D%E4%BD%8E%E5%86%85%E5%AD%98%E5%B3%B0%E5%80%BC" target="_blank" rel="external">34、简单了解下@autoreleasepool</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/35.%E7%94%A8%E5%83%B5%E5%B0%B8%E5%AF%B9%E8%B1%A1%E8%B0%83%E8%AF%95%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98.md#%E7%94%A8%E5%83%B5%E5%B0%B8%E5%AF%B9%E8%B1%A1%E8%B0%83%E8%AF%95%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98" target="_blank" rel="external">35、僵尸对象到底是什么</a></p>
<h1 id="第六章-块与大中枢派发"><a href="#第六章-块与大中枢派发" class="headerlink" title="第六章 块与大中枢派发"></a>第六章 块与大中枢派发</h1><blockquote>
<ul>
<li>块（block）是一种可在C、C++及OC代码中使用的词法闭包，借由块，开发者可将代码像对象一样传递。</li>
<li>GCD提供了对线程的抽象，这种抽象基于“派发队列”（dispatch queue）。GCD会根据系统资源情况，适时地创建、复用、摧毁后台线程，以便处理每个队列。</li>
</ul>
</blockquote>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/37.%E7%90%86%E8%A7%A3%E5%9D%97%E7%9A%84%E6%A6%82%E5%BF%B5.md#%E7%90%86%E8%A7%A3%E5%9D%97%E7%9A%84%E6%A6%82%E5%BF%B5" target="_blank" rel="external">37、block概念</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/38.%E4%B8%BA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9D%97%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BAtypedef.md#%E4%B8%BA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9D%97%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BAtypedef" target="_blank" rel="external">38、声明block</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/39.%E7%94%A8handler%E5%9D%97%E9%99%8D%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%88%86%E6%95%A3%E7%A8%8B%E5%BA%A6.md#%E7%94%A8handler%E5%9D%97%E9%99%8D%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%88%86%E6%95%A3%E7%A8%8B%E5%BA%A6" target="_blank" rel="external">39、block or delegate</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/41.%E5%A4%9A%E7%94%A8%E6%B4%BE%E5%8F%91%E9%98%9F%E5%88%97%EF%BC%8C%E5%B0%91%E7%94%A8%E5%90%8C%E6%AD%A5%E9%94%81.md#%E5%A4%9A%E7%94%A8%E6%B4%BE%E5%8F%91%E9%98%9F%E5%88%97%E5%B0%91%E7%94%A8%E5%90%8C%E6%AD%A5%E9%94%81" target="_blank" rel="external">41、iOS中的锁</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/42.%E5%A4%9A%E7%94%A8GCD%EF%BC%8C%E5%B0%91%E7%94%A8performSelector%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95.md#%E5%A4%9A%E7%94%A8gcd%E5%B0%91%E7%94%A8performselector%E7%B3%BB%E5%88%97%E6%96%B9%E6%B3%95" target="_blank" rel="external">42、GCD 取代 performSelector
</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/43.%E6%8E%8C%E6%8F%A1GCD%E5%8F%8A%E6%93%8D%E4%BD%9C%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8%E6%97%B6%E6%9C%BA.md#%E6%8E%8C%E6%8F%A1gcd%E5%8F%8A%E6%93%8D%E4%BD%9C%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8%E6%97%B6%E6%9C%BA" target="_blank" rel="external">43、NSOperation</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/44.%E9%80%9A%E8%BF%87Dispatch%20Group%20%E6%9C%BA%E5%88%B6%EF%BC%8C%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%8A%B6%E5%86%B5%E6%9D%A5%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1.md#%E9%80%9A%E8%BF%87dispatch-group%E6%9C%BA%E5%88%B6%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%8A%B6%E5%86%B5%E6%9D%A5%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1" target="_blank" rel="external">44、dispatch group 的方法简介</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/45.%E4%BD%BF%E7%94%A8dispatch_once%E6%9D%A5%E6%89%A7%E8%A1%8C%E5%8F%AA%E9%9C%80%E8%BF%90%E8%A1%8C%E4%B8%80%E6%AC%A1%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81.md#%E4%BD%BF%E7%94%A8dispatch_once%E6%9D%A5%E6%89%A7%E8%A1%8C%E5%8F%AA%E9%9C%80%E8%BF%90%E8%A1%8C%E4%B8%80%E6%AC%A1%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81" target="_blank" rel="external">45、dispatch_once 实现单例</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/46.%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8dispatch_get_current_queue.md#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8dispatch_get_current_queue" target="_blank" rel="external">46、废弃的dispatch_get_current_queue
</a></p>
<h1 id="第七章-系统框架"><a href="#第七章-系统框架" class="headerlink" title="第七章 系统框架"></a>第七章 系统框架</h1><blockquote>
<p>只要编写OC代码，就离不开系统框架</p>
</blockquote>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/47.%E7%86%9F%E6%82%89%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6.md#%E7%86%9F%E6%82%89%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6" target="_blank" rel="external">47、熟悉系统框架</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/48.%E5%A4%9A%E7%94%A8%E5%9D%97%E6%9E%9A%E4%B8%BE%EF%BC%8C%E5%B0%91%E7%94%A8for%E5%BE%AA%E7%8E%AF.md#%E5%A4%9A%E7%94%A8%E5%9D%97%E6%9E%9A%E4%B8%BE%E5%B0%91%E7%94%A8for%E5%BE%AA%E7%8E%AF" target="_blank" rel="external">48、四个遍历方法</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/49.%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B6%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%AD%E4%B9%89%E7%9A%84collection%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BC%9D%E6%A1%A5%E6%8E%A5.md#%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B6%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%AF%AD%E4%B9%89%E7%9A%84collection%E4%BD%BF%E7%94%A8%E6%97%A0%E7%BC%9D%E6%A1%A5%E6%8E%A5" target="_blank" rel="external">49、使用__bridge无缝桥接</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/50.%E6%9E%84%E5%BB%BA%E7%BC%93%E5%AD%98%E6%97%B6%E9%80%89%E7%94%A8NSCache%E8%80%8C%E9%9D%9ENSDictionary.md#%E6%9E%84%E5%BB%BA%E7%BC%93%E5%AD%98%E6%97%B6%E9%80%89%E7%94%A8nscache%E8%80%8C%E9%9D%9Ensdictionary" target="_blank" rel="external">50、缓存NSCache</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/51.%E7%B2%BE%E7%AE%80initialize%E4%B8%8Eload%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81.md#%E7%B2%BE%E7%AE%80initialize%E4%B8%8Eload%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81" target="_blank" rel="external">51、你应该了解的initialize与load</a></p>
<p><a href="https://github.com/LionWY/Read_Notes/blob/master/Effective%20Objective-C%202.0%20%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FiOS%E4%B8%8EOS%20X%E4%BB%A3%E7%A0%81%E7%9A%8452%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95/52.%E5%88%AB%E5%BF%98%E4%BA%86NSTimer%E4%BC%9A%E4%BF%9D%E7%95%99%E5%85%B6%E7%9B%AE%E6%A0%87%E5%AF%B9%E8%B1%A1.md#%E5%88%AB%E5%BF%98%E4%BA%86nstimer%E4%BC%9A%E4%BF%9D%E7%95%99%E5%85%B6%E7%9B%AE%E6%A0%87%E5%AF%B9%E8%B1%A1" target="_blank" rel="external">52、NSTimer的小知识</a></p>
<p>[终]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 常用命令]]></title>
      <url>http://lionwy.github.io/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方文档</a></p>
</blockquote>
<ol>
<li><p>把本地文件上传blog</p>
<pre><code>hexo clean
hexo generate
hexo deploy
</code></pre></li>
<li><p>新建文章</p>
<pre><code>hexo new “文章题目”
</code></pre></li>
<li><p>新建另一页（如关于，标签，分类）</p>
<pre><code>hexo new page &quot;about&quot;
</code></pre></li>
<li><p>分类下显示你所编写的标签</p>
<pre><code>---
title: categories
date: 2016-09-14 11:54:11
type: &quot;categories&quot; #这句话不能少
comments: false   #去除多说评论框

---
</code></pre></li>
<li><p>添加多说评论</p>
<ul>
<li><p><a href="http://duoshuo.com/" target="_blank" rel="external">多说官网</a> “我要安装”</p>
</li>
<li><p>在 next 主题设置shortName</p>
<pre><code># Duoshuo ShortName #不能去掉注释 
duoshuo_shortname: your_short_name
</code></pre></li>
</ul>
</li>
<li><p>文章添加多个标签</p>
<pre><code>tags: [tag1,tag2,tag3] #冒号后面添加空格
</code></pre></li>
<li><p>关于标题设置</p>
<pre><code>~/Hexo/themes/next/layout/index.swig 
</code></pre></li>
</ol>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--设置的标题 + 主题的描述--&gt;</span></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; config.title &#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123; theme.description &#125;&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line">		</div><div class="line"><span class="comment">&lt;!--主题关键字 + 标题 + 主题描述--&gt;</span>		</div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; theme.keywords &#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123; config.title &#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123; theme.description &#125;&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line">		</div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; config.title &#125;&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
